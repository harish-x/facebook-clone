generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id
  username String  
  avatar   String?
  cover   String?
  name   String?
  surname   String?
  description   String?
  city   String?
  school   String?
  work   String?
  website   String?
  createdAt DateTime @default(now())
  post Post[]
  likes Like[]
  comments Comment[]
  followers Follower[] @relation("UserFollowers")
  followings Follower[] @relation("UserFollowings")
  followRequestsSent FollowRequest[] @relation("FollowRequestSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestReceived")
  blocks Block[] @relation("BlocksSent")
  blockedBy Block[] @relation("BlocksRecived")
  stories Story[]
}

model Post{
  id Int @id @default(autoincrement())
  desc String
  img String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId String
  likes Like[]
  comments Comment[]
}

model Comment{
  id Int @id @default(autoincrement())
  desc String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId String
  post Post @relation(fields: [PostId],references: [id],onDelete: Cascade)
  PostId Int
  likes Like[]
}
model Like{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId String
  post Post? @relation(fields: [PostId],references: [id],onDelete: Cascade)
  PostId Int
  Comment Comment? @relation(fields: [commentId],references: [id],onDelete: Cascade)
  commentId Int?
}

model Follower {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  follower User @relation("UserFollowers",fields: [followerId],references: [id],onDelete: Cascade)
  followerId String
  following User @relation("UserFollowings",fields: [followingId],references: [id],onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  sender User @relation("FollowRequestSent",fields: [senderId],references: [id],onDelete: Cascade)
  senderId String
  receiver User @relation("FollowRequestReceived",fields: [receiverId],references: [id],onDelete: Cascade)
  receiverId String
  @@unique([senderId,receiverId])
}

model Block {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker User @relation("BlocksSent",fields: [blockerId],references: [id],onDelete: Cascade)
  blockerId String
  blocked User @relation("BlocksRecived",fields: [blockedId],references: [id],onDelete: Cascade)
  blockedId String
  @@unique([blockedId,blockerId])
}

model Story {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime 
  img String
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId String @unique
}